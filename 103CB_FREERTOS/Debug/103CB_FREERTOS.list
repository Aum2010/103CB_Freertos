
103CB_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e48  08003e48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e48  08003e48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e48  08003e48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  20000010  08003e60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019c4  08003e60  000219c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f50  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292b  00000000  00000000  00033f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  000368b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  000378f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023c0  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d8b  00000000  00000000  0003abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905c4  00000000  00000000  0004b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbf2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  000dbf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003dc0 	.word	0x08003dc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003dc0 	.word	0x08003dc0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f98e 	bl	8000474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f816 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f85a 	bl	8000214 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 f91a 	bl	8001398 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <main+0x2c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	f001 f97b 	bl	8001464 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x34>)
 8000172:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000174:	f001 f942 	bl	80013fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x28>
 800017a:	bf00      	nop
 800017c:	08003e0c 	.word	0x08003e0c
 8000180:	08000289 	.word	0x08000289
 8000184:	20001934 	.word	0x20001934

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f003 fe0a 	bl	8003db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fa61 	bl	8000698 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001dc:	f000 f86e 	bl	80002bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fccc 	bl	8000b98 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000206:	f000 f859 	bl	80002bc <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	; 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <MX_GPIO_Init+0x70>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	4a19      	ldr	r2, [pc, #100]	; (8000284 <MX_GPIO_Init+0x70>)
 8000220:	f043 0310 	orr.w	r3, r3, #16
 8000224:	6193      	str	r3, [r2, #24]
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <MX_GPIO_Init+0x70>)
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0310 	and.w	r3, r3, #16
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <MX_GPIO_Init+0x70>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	4a13      	ldr	r2, [pc, #76]	; (8000284 <MX_GPIO_Init+0x70>)
 8000238:	f043 0320 	orr.w	r3, r3, #32
 800023c:	6193      	str	r3, [r2, #24]
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_GPIO_Init+0x70>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	f003 0320 	and.w	r3, r3, #32
 8000246:	60bb      	str	r3, [r7, #8]
 8000248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x70>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x70>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x70>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x70>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x70>)
 8000268:	f043 0308 	orr.w	r3, r3, #8
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x70>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0308 	and.w	r3, r3, #8
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f001 f991 	bl	80015b8 <osDelay>
 8000296:	e7fb      	b.n	8000290 <StartDefaultTask+0x8>

08000298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d101      	bne.n	80002ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002aa:	f000 f8f9 	bl	80004a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40012c00 	.word	0x40012c00

080002bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <HAL_MspInit+0x5c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a14      	ldr	r2, [pc, #80]	; (8000324 <HAL_MspInit+0x5c>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_MspInit+0x5c>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <HAL_MspInit+0x5c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <HAL_MspInit+0x5c>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <HAL_MspInit+0x5c>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_MspInit+0x60>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_MspInit+0x60>)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000
 8000328:	40010000 	.word	0x40010000

0800032c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08c      	sub	sp, #48	; 0x30
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800033c:	2200      	movs	r2, #0
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	2019      	movs	r0, #25
 8000342:	f000 f97e 	bl	8000642 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000346:	2019      	movs	r0, #25
 8000348:	f000 f997 	bl	800067a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <HAL_InitTick+0x9c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <HAL_InitTick+0x9c>)
 8000352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <HAL_InitTick+0x9c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000364:	f107 0210 	add.w	r2, r7, #16
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd7a 	bl	8000e68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000374:	f000 fd64 	bl	8000e40 <HAL_RCC_GetPCLK2Freq>
 8000378:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800037c:	4a13      	ldr	r2, [pc, #76]	; (80003cc <HAL_InitTick+0xa0>)
 800037e:	fba2 2303 	umull	r2, r3, r2, r3
 8000382:	0c9b      	lsrs	r3, r3, #18
 8000384:	3b01      	subs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_InitTick+0xa4>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <HAL_InitTick+0xa8>)
 800038c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <HAL_InitTick+0xa4>)
 8000390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000394:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <HAL_InitTick+0xa4>)
 8000398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_InitTick+0xa4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <HAL_InitTick+0xa4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <HAL_InitTick+0xa4>)
 80003aa:	f000 fdab 	bl	8000f04 <HAL_TIM_Base_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d104      	bne.n	80003be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80003b4:	4806      	ldr	r0, [pc, #24]	; (80003d0 <HAL_InitTick+0xa4>)
 80003b6:	f000 fdfd 	bl	8000fb4 <HAL_TIM_Base_Start_IT>
 80003ba:	4603      	mov	r3, r0
 80003bc:	e000      	b.n	80003c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80003be:	2301      	movs	r3, #1
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3730      	adds	r7, #48	; 0x30
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	431bde83 	.word	0x431bde83
 80003d0:	20001938 	.word	0x20001938
 80003d4:	40012c00 	.word	0x40012c00

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <HardFault_Handler+0x4>

080003ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <MemManage_Handler+0x4>

080003f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <BusFault_Handler+0x4>

080003f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <UsageFault_Handler+0x4>

080003fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <TIM1_UP_IRQHandler+0x10>)
 800040e:	f000 fe23 	bl	8001058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20001938 	.word	0x20001938

0800041c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000428:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800042a:	e003      	b.n	8000434 <LoopCopyDataInit>

0800042c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800042e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000430:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000432:	3104      	adds	r1, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000438:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800043a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800043c:	d3f6      	bcc.n	800042c <CopyDataInit>
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000440:	e002      	b.n	8000448 <LoopFillZerobss>

08000442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000444:	f842 3b04 	str.w	r3, [r2], #4

08000448 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800044c:	d3f9      	bcc.n	8000442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f7ff ffe5 	bl	800041c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f003 fc7b 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff fe7b 	bl	8000150 <main>
  bx lr
 800045a:	4770      	bx	lr
  ldr r3, =_sidata
 800045c:	08003e50 	.word	0x08003e50
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000464:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000468:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800046c:	200019c4 	.word	0x200019c4

08000470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_2_IRQHandler>
	...

08000474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_Init+0x28>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <HAL_Init+0x28>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000484:	2003      	movs	r0, #3
 8000486:	f000 f8d1 	bl	800062c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff4e 	bl	800032c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000490:	f7ff ff1a 	bl	80002c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <HAL_IncTick+0x1c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_IncTick+0x20>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <HAL_IncTick+0x20>)
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	20000008 	.word	0x20000008
 80004c0:	20001980 	.word	0x20001980

080004c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return uwTick;
 80004c8:	4b02      	ldr	r3, [pc, #8]	; (80004d4 <HAL_GetTick+0x10>)
 80004ca:	681b      	ldr	r3, [r3, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20001980 	.word	0x20001980

080004d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f003 0307 	and.w	r3, r3, #7
 80004e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__NVIC_SetPriorityGrouping+0x44>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004f4:	4013      	ands	r3, r2
 80004f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800050a:	4a04      	ldr	r2, [pc, #16]	; (800051c <__NVIC_SetPriorityGrouping+0x44>)
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	60d3      	str	r3, [r2, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <__NVIC_GetPriorityGrouping+0x18>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	f003 0307 	and.w	r3, r3, #7
}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0b      	blt.n	8000566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4906      	ldr	r1, [pc, #24]	; (8000570 <__NVIC_EnableIRQ+0x34>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100

08000574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	490c      	ldr	r1, [pc, #48]	; (80005c0 <__NVIC_SetPriority+0x4c>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800059c:	e00a      	b.n	80005b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4908      	ldr	r1, [pc, #32]	; (80005c4 <__NVIC_SetPriority+0x50>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	3b04      	subs	r3, #4
 80005ac:	0112      	lsls	r2, r2, #4
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	440b      	add	r3, r1
 80005b2:	761a      	strb	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000e100 	.word	0xe000e100
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f1c3 0307 	rsb	r3, r3, #7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf28      	it	cs
 80005e6:	2304      	movcs	r3, #4
 80005e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3304      	adds	r3, #4
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d902      	bls.n	80005f8 <NVIC_EncodePriority+0x30>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3b03      	subs	r3, #3
 80005f6:	e000      	b.n	80005fa <NVIC_EncodePriority+0x32>
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43da      	mvns	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	401a      	ands	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43d9      	mvns	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	4313      	orrs	r3, r2
         );
}
 8000622:	4618      	mov	r0, r3
 8000624:	3724      	adds	r7, #36	; 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff4f 	bl	80004d8 <__NVIC_SetPriorityGrouping>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	4603      	mov	r3, r0
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000654:	f7ff ff64 	bl	8000520 <__NVIC_GetPriorityGrouping>
 8000658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	68b9      	ldr	r1, [r7, #8]
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f7ff ffb2 	bl	80005c8 <NVIC_EncodePriority>
 8000664:	4602      	mov	r2, r0
 8000666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff81 	bl	8000574 <__NVIC_SetPriority>
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff57 	bl	800053c <__NVIC_EnableIRQ>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e26c      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f000 8087 	beq.w	80007c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006b8:	4b92      	ldr	r3, [pc, #584]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 030c 	and.w	r3, r3, #12
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d00c      	beq.n	80006de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006c4:	4b8f      	ldr	r3, [pc, #572]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 030c 	and.w	r3, r3, #12
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d112      	bne.n	80006f6 <HAL_RCC_OscConfig+0x5e>
 80006d0:	4b8c      	ldr	r3, [pc, #560]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006dc:	d10b      	bne.n	80006f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006de:	4b89      	ldr	r3, [pc, #548]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d06c      	beq.n	80007c4 <HAL_RCC_OscConfig+0x12c>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d168      	bne.n	80007c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e246      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006fe:	d106      	bne.n	800070e <HAL_RCC_OscConfig+0x76>
 8000700:	4b80      	ldr	r3, [pc, #512]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a7f      	ldr	r2, [pc, #508]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e02e      	b.n	800076c <HAL_RCC_OscConfig+0xd4>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10c      	bne.n	8000730 <HAL_RCC_OscConfig+0x98>
 8000716:	4b7b      	ldr	r3, [pc, #492]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a7a      	ldr	r2, [pc, #488]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800071c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	4b78      	ldr	r3, [pc, #480]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a77      	ldr	r2, [pc, #476]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	e01d      	b.n	800076c <HAL_RCC_OscConfig+0xd4>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000738:	d10c      	bne.n	8000754 <HAL_RCC_OscConfig+0xbc>
 800073a:	4b72      	ldr	r3, [pc, #456]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a71      	ldr	r2, [pc, #452]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	4b6f      	ldr	r3, [pc, #444]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a6e      	ldr	r2, [pc, #440]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800074c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e00b      	b.n	800076c <HAL_RCC_OscConfig+0xd4>
 8000754:	4b6b      	ldr	r3, [pc, #428]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a6a      	ldr	r2, [pc, #424]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800075a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b68      	ldr	r3, [pc, #416]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a67      	ldr	r2, [pc, #412]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000774:	f7ff fea6 	bl	80004c4 <HAL_GetTick>
 8000778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800077a:	e008      	b.n	800078e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800077c:	f7ff fea2 	bl	80004c4 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	2b64      	cmp	r3, #100	; 0x64
 8000788:	d901      	bls.n	800078e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800078a:	2303      	movs	r3, #3
 800078c:	e1fa      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800078e:	4b5d      	ldr	r3, [pc, #372]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f0      	beq.n	800077c <HAL_RCC_OscConfig+0xe4>
 800079a:	e014      	b.n	80007c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800079c:	f7ff fe92 	bl	80004c4 <HAL_GetTick>
 80007a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007a2:	e008      	b.n	80007b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007a4:	f7ff fe8e 	bl	80004c4 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2b64      	cmp	r3, #100	; 0x64
 80007b0:	d901      	bls.n	80007b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80007b2:	2303      	movs	r3, #3
 80007b4:	e1e6      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f0      	bne.n	80007a4 <HAL_RCC_OscConfig+0x10c>
 80007c2:	e000      	b.n	80007c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d063      	beq.n	800089a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80007d2:	4b4c      	ldr	r3, [pc, #304]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f003 030c 	and.w	r3, r3, #12
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00b      	beq.n	80007f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f003 030c 	and.w	r3, r3, #12
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	d11c      	bne.n	8000824 <HAL_RCC_OscConfig+0x18c>
 80007ea:	4b46      	ldr	r3, [pc, #280]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d116      	bne.n	8000824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d005      	beq.n	800080e <HAL_RCC_OscConfig+0x176>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d001      	beq.n	800080e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e1ba      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800080e:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4939      	ldr	r1, [pc, #228]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800081e:	4313      	orrs	r3, r2
 8000820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000822:	e03a      	b.n	800089a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d020      	beq.n	800086e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <HAL_RCC_OscConfig+0x270>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000832:	f7ff fe47 	bl	80004c4 <HAL_GetTick>
 8000836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000838:	e008      	b.n	800084c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800083a:	f7ff fe43 	bl	80004c4 <HAL_GetTick>
 800083e:	4602      	mov	r2, r0
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b02      	cmp	r3, #2
 8000846:	d901      	bls.n	800084c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000848:	2303      	movs	r3, #3
 800084a:	e19b      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f0      	beq.n	800083a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4927      	ldr	r1, [pc, #156]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000868:	4313      	orrs	r3, r2
 800086a:	600b      	str	r3, [r1, #0]
 800086c:	e015      	b.n	800089a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <HAL_RCC_OscConfig+0x270>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000874:	f7ff fe26 	bl	80004c4 <HAL_GetTick>
 8000878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800087a:	e008      	b.n	800088e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800087c:	f7ff fe22 	bl	80004c4 <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b02      	cmp	r3, #2
 8000888:	d901      	bls.n	800088e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e17a      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f0      	bne.n	800087c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d03a      	beq.n	800091c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d019      	beq.n	80008e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_RCC_OscConfig+0x274>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008b4:	f7ff fe06 	bl	80004c4 <HAL_GetTick>
 80008b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ba:	e008      	b.n	80008ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008bc:	f7ff fe02 	bl	80004c4 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d901      	bls.n	80008ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80008ca:	2303      	movs	r3, #3
 80008cc:	e15a      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f0      	beq.n	80008bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 faf4 	bl	8000ec8 <RCC_Delay>
 80008e0:	e01c      	b.n	800091c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_RCC_OscConfig+0x274>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008e8:	f7ff fdec 	bl	80004c4 <HAL_GetTick>
 80008ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008ee:	e00f      	b.n	8000910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008f0:	f7ff fde8 	bl	80004c4 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d908      	bls.n	8000910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e140      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	42420000 	.word	0x42420000
 800090c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000910:	4b9e      	ldr	r3, [pc, #632]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e9      	bne.n	80008f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 80a6 	beq.w	8000a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800092e:	4b97      	ldr	r3, [pc, #604]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10d      	bne.n	8000956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b94      	ldr	r3, [pc, #592]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a93      	ldr	r2, [pc, #588]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b91      	ldr	r3, [pc, #580]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000952:	2301      	movs	r3, #1
 8000954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000956:	4b8e      	ldr	r3, [pc, #568]	; (8000b90 <HAL_RCC_OscConfig+0x4f8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095e:	2b00      	cmp	r3, #0
 8000960:	d118      	bne.n	8000994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000962:	4b8b      	ldr	r3, [pc, #556]	; (8000b90 <HAL_RCC_OscConfig+0x4f8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a8a      	ldr	r2, [pc, #552]	; (8000b90 <HAL_RCC_OscConfig+0x4f8>)
 8000968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800096e:	f7ff fda9 	bl	80004c4 <HAL_GetTick>
 8000972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	e008      	b.n	8000988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000976:	f7ff fda5 	bl	80004c4 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b64      	cmp	r3, #100	; 0x64
 8000982:	d901      	bls.n	8000988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000984:	2303      	movs	r3, #3
 8000986:	e0fd      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000988:	4b81      	ldr	r3, [pc, #516]	; (8000b90 <HAL_RCC_OscConfig+0x4f8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f0      	beq.n	8000976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d106      	bne.n	80009aa <HAL_RCC_OscConfig+0x312>
 800099c:	4b7b      	ldr	r3, [pc, #492]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4a7a      	ldr	r2, [pc, #488]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6213      	str	r3, [r2, #32]
 80009a8:	e02d      	b.n	8000a06 <HAL_RCC_OscConfig+0x36e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10c      	bne.n	80009cc <HAL_RCC_OscConfig+0x334>
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009b4:	6a1b      	ldr	r3, [r3, #32]
 80009b6:	4a75      	ldr	r2, [pc, #468]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009b8:	f023 0301 	bic.w	r3, r3, #1
 80009bc:	6213      	str	r3, [r2, #32]
 80009be:	4b73      	ldr	r3, [pc, #460]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009c0:	6a1b      	ldr	r3, [r3, #32]
 80009c2:	4a72      	ldr	r2, [pc, #456]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009c4:	f023 0304 	bic.w	r3, r3, #4
 80009c8:	6213      	str	r3, [r2, #32]
 80009ca:	e01c      	b.n	8000a06 <HAL_RCC_OscConfig+0x36e>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	d10c      	bne.n	80009ee <HAL_RCC_OscConfig+0x356>
 80009d4:	4b6d      	ldr	r3, [pc, #436]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6213      	str	r3, [r2, #32]
 80009e0:	4b6a      	ldr	r3, [pc, #424]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009e2:	6a1b      	ldr	r3, [r3, #32]
 80009e4:	4a69      	ldr	r2, [pc, #420]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6213      	str	r3, [r2, #32]
 80009ec:	e00b      	b.n	8000a06 <HAL_RCC_OscConfig+0x36e>
 80009ee:	4b67      	ldr	r3, [pc, #412]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	4a66      	ldr	r2, [pc, #408]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	6213      	str	r3, [r2, #32]
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	6a1b      	ldr	r3, [r3, #32]
 80009fe:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a00:	f023 0304 	bic.w	r3, r3, #4
 8000a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d015      	beq.n	8000a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fd59 	bl	80004c4 <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a14:	e00a      	b.n	8000a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a16:	f7ff fd55 	bl	80004c4 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d901      	bls.n	8000a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e0ab      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a2c:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0ee      	beq.n	8000a16 <HAL_RCC_OscConfig+0x37e>
 8000a38:	e014      	b.n	8000a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fd43 	bl	80004c4 <HAL_GetTick>
 8000a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a40:	e00a      	b.n	8000a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd3f 	bl	80004c4 <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d901      	bls.n	8000a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000a54:	2303      	movs	r3, #3
 8000a56:	e095      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a58:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1ee      	bne.n	8000a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d105      	bne.n	8000a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a6a:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8081 	beq.w	8000b82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a80:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d061      	beq.n	8000b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d146      	bne.n	8000b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <HAL_RCC_OscConfig+0x4fc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9a:	f7ff fd13 	bl	80004c4 <HAL_GetTick>
 8000a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa0:	e008      	b.n	8000ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa2:	f7ff fd0f 	bl	80004c4 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d901      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e067      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f0      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac8:	d108      	bne.n	8000adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	492d      	ldr	r1, [pc, #180]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a19      	ldr	r1, [r3, #32]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	430b      	orrs	r3, r1
 8000aee:	4927      	ldr	r1, [pc, #156]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	4313      	orrs	r3, r2
 8000af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_RCC_OscConfig+0x4fc>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afa:	f7ff fce3 	bl	80004c4 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fcdf 	bl	80004c4 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e037      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f0      	beq.n	8000b02 <HAL_RCC_OscConfig+0x46a>
 8000b20:	e02f      	b.n	8000b82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_RCC_OscConfig+0x4fc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b28:	f7ff fccc 	bl	80004c4 <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2e:	e008      	b.n	8000b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fcc8 	bl	80004c4 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e020      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f0      	bne.n	8000b30 <HAL_RCC_OscConfig+0x498>
 8000b4e:	e018      	b.n	8000b82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d101      	bne.n	8000b5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e013      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_RCC_OscConfig+0x4f4>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d106      	bne.n	8000b7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d001      	beq.n	8000b82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40007000 	.word	0x40007000
 8000b94:	42420060 	.word	0x42420060

08000b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e0d0      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000bac:	4b6a      	ldr	r3, [pc, #424]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d910      	bls.n	8000bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 0207 	bic.w	r2, r3, #7
 8000bc2:	4965      	ldr	r1, [pc, #404]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bca:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d001      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e0b8      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d020      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf4:	4b59      	ldr	r3, [pc, #356]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a58      	ldr	r2, [pc, #352]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c0c:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a52      	ldr	r2, [pc, #328]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c18:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	494d      	ldr	r1, [pc, #308]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d040      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d107      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d115      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e07f      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d107      	bne.n	8000c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d109      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e073      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e06b      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f023 0203 	bic.w	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4936      	ldr	r1, [pc, #216]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000c84:	4313      	orrs	r3, r2
 8000c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c88:	f7ff fc1c 	bl	80004c4 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c8e:	e00a      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c90:	f7ff fc18 	bl	80004c4 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e053      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 020c 	and.w	r2, r3, #12
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d1eb      	bne.n	8000c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d210      	bcs.n	8000ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 0207 	bic.w	r2, r3, #7
 8000cce:	4922      	ldr	r1, [pc, #136]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d001      	beq.n	8000ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e032      	b.n	8000d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	4916      	ldr	r1, [pc, #88]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	490e      	ldr	r1, [pc, #56]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d26:	f000 f821 	bl	8000d6c <HAL_RCC_GetSysClockFreq>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	490a      	ldr	r1, [pc, #40]	; (8000d60 <HAL_RCC_ClockConfig+0x1c8>)
 8000d38:	5ccb      	ldrb	r3, [r1, r3]
 8000d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <HAL_RCC_ClockConfig+0x1cc>)
 8000d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_RCC_ClockConfig+0x1d0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff faf0 	bl	800032c <HAL_InitTick>

  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	08003e30 	.word	0x08003e30
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d6c:	b490      	push	{r4, r7}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d74:	1d3c      	adds	r4, r7, #4
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d7c:	f240 2301 	movw	r3, #513	; 0x201
 8000d80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d002      	beq.n	8000dac <HAL_RCC_GetSysClockFreq+0x40>
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d003      	beq.n	8000db2 <HAL_RCC_GetSysClockFreq+0x46>
 8000daa:	e02d      	b.n	8000e08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000dae:	623b      	str	r3, [r7, #32]
      break;
 8000db0:	e02d      	b.n	8000e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	0c9b      	lsrs	r3, r3, #18
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dbe:	4413      	add	r3, r2
 8000dc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000dc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	0c5b      	lsrs	r3, r3, #17
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dde:	4413      	add	r3, r2
 8000de0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000de4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000dea:	fb02 f203 	mul.w	r2, r2, r3
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	e004      	b.n	8000e02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	623b      	str	r3, [r7, #32]
      break;
 8000e06:	e002      	b.n	8000e0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e0a:	623b      	str	r3, [r7, #32]
      break;
 8000e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc90      	pop	{r4, r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	08003de4 	.word	0x08003de4
 8000e20:	40021000 	.word	0x40021000
 8000e24:	007a1200 	.word	0x007a1200
 8000e28:	003d0900 	.word	0x003d0900

08000e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e44:	f7ff fff2 	bl	8000e2c <HAL_RCC_GetHCLKFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	0adb      	lsrs	r3, r3, #11
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	4903      	ldr	r1, [pc, #12]	; (8000e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	08003e40 	.word	0x08003e40

08000e68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	220f      	movs	r2, #15
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_RCC_GetClockConfig+0x58>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_GetClockConfig+0x58>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_RCC_GetClockConfig+0x58>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_RCC_GetClockConfig+0x58>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0207 	and.w	r2, r3, #7
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <RCC_Delay+0x34>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <RCC_Delay+0x38>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ee4:	bf00      	nop
  }
  while (Delay --);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	60fa      	str	r2, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f9      	bne.n	8000ee4 <RCC_Delay+0x1c>
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000000 	.word	0x20000000
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e041      	b.n	8000f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f839 	bl	8000fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2202      	movs	r2, #2
 8000f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f000 f9b4 	bl	80012b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d001      	beq.n	8000fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e03a      	b.n	8001042 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_TIM_Base_Start_IT+0x98>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00e      	beq.n	800100c <HAL_TIM_Base_Start_IT+0x58>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff6:	d009      	beq.n	800100c <HAL_TIM_Base_Start_IT+0x58>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_TIM_Base_Start_IT+0x9c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_TIM_Base_Start_IT+0x58>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_TIM_Base_Start_IT+0xa0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d111      	bne.n	8001030 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b06      	cmp	r3, #6
 800101c:	d010      	beq.n	8001040 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0201 	orr.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800102e:	e007      	b.n	8001040 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40000400 	.word	0x40000400
 8001054:	40000800 	.word	0x40000800

08001058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d122      	bne.n	80010b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b02      	cmp	r3, #2
 800107a:	d11b      	bne.n	80010b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f06f 0202 	mvn.w	r2, #2
 8001084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f8ed 	bl	800127a <HAL_TIM_IC_CaptureCallback>
 80010a0:	e005      	b.n	80010ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f8e0 	bl	8001268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f8ef 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d122      	bne.n	8001108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d11b      	bne.n	8001108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f06f 0204 	mvn.w	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f8c3 	bl	800127a <HAL_TIM_IC_CaptureCallback>
 80010f4:	e005      	b.n	8001102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8b6 	bl	8001268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f8c5 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b08      	cmp	r3, #8
 8001114:	d122      	bne.n	800115c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b08      	cmp	r3, #8
 8001122:	d11b      	bne.n	800115c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f06f 0208 	mvn.w	r2, #8
 800112c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f899 	bl	800127a <HAL_TIM_IC_CaptureCallback>
 8001148:	e005      	b.n	8001156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f88c 	bl	8001268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f89b 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b10      	cmp	r3, #16
 8001168:	d122      	bne.n	80011b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b10      	cmp	r3, #16
 8001176:	d11b      	bne.n	80011b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f06f 0210 	mvn.w	r2, #16
 8001180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2208      	movs	r2, #8
 8001186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f86f 	bl	800127a <HAL_TIM_IC_CaptureCallback>
 800119c:	e005      	b.n	80011aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f862 	bl	8001268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f871 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10e      	bne.n	80011dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d107      	bne.n	80011dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f06f 0201 	mvn.w	r2, #1
 80011d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f85e 	bl	8000298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	2b80      	cmp	r3, #128	; 0x80
 80011e8:	d10e      	bne.n	8001208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f4:	2b80      	cmp	r3, #128	; 0x80
 80011f6:	d107      	bne.n	8001208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f8bf 	bl	8001386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d10e      	bne.n	8001234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001220:	2b40      	cmp	r3, #64	; 0x40
 8001222:	d107      	bne.n	8001234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800122c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f835 	bl	800129e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10e      	bne.n	8001260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b20      	cmp	r3, #32
 800124e:	d107      	bne.n	8001260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f06f 0220 	mvn.w	r2, #32
 8001258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f88a 	bl	8001374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <TIM_Base_SetConfig+0xb8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00b      	beq.n	80012e0 <TIM_Base_SetConfig+0x30>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ce:	d007      	beq.n	80012e0 <TIM_Base_SetConfig+0x30>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <TIM_Base_SetConfig+0xbc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d003      	beq.n	80012e0 <TIM_Base_SetConfig+0x30>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <TIM_Base_SetConfig+0xc0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d108      	bne.n	80012f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <TIM_Base_SetConfig+0xb8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00b      	beq.n	8001312 <TIM_Base_SetConfig+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d007      	beq.n	8001312 <TIM_Base_SetConfig+0x62>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <TIM_Base_SetConfig+0xbc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d003      	beq.n	8001312 <TIM_Base_SetConfig+0x62>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <TIM_Base_SetConfig+0xc0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d108      	bne.n	8001324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <TIM_Base_SetConfig+0xb8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d103      	bne.n	8001358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	615a      	str	r2, [r3, #20]
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40000400 	.word	0x40000400
 8001370:	40000800 	.word	0x40000800

08001374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800139e:	f3ef 8305 	mrs	r3, IPSR
 80013a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80013a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013aa:	f3ef 8310 	mrs	r3, PRIMASK
 80013ae:	607b      	str	r3, [r7, #4]
  return(result);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <osKernelInitialize+0x32>
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <osKernelInitialize+0x60>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d109      	bne.n	80013d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013be:	f3ef 8311 	mrs	r3, BASEPRI
 80013c2:	603b      	str	r3, [r7, #0]
  return(result);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80013ca:	f06f 0305 	mvn.w	r3, #5
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e00c      	b.n	80013ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <osKernelInitialize+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <osKernelInitialize+0x60>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e002      	b.n	80013ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	2000002c 	.word	0x2000002c

080013fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001402:	f3ef 8305 	mrs	r3, IPSR
 8001406:	60bb      	str	r3, [r7, #8]
  return(result);
 8001408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800140e:	f3ef 8310 	mrs	r3, PRIMASK
 8001412:	607b      	str	r3, [r7, #4]
  return(result);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <osKernelStart+0x32>
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <osKernelStart+0x64>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d109      	bne.n	8001436 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001422:	f3ef 8311 	mrs	r3, BASEPRI
 8001426:	603b      	str	r3, [r7, #0]
  return(result);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <osKernelStart+0x3a>
    stat = osErrorISR;
 800142e:	f06f 0305 	mvn.w	r3, #5
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e00e      	b.n	8001454 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <osKernelStart+0x64>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <osKernelStart+0x64>)
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001444:	f001 f878 	bl	8002538 <vTaskStartScheduler>
      stat = osOK;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e002      	b.n	8001454 <osKernelStart+0x58>
    } else {
      stat = osError;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001454:	68fb      	ldr	r3, [r7, #12]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000002c 	.word	0x2000002c

08001464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b092      	sub	sp, #72	; 0x48
 8001468:	af04      	add	r7, sp, #16
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001474:	f3ef 8305 	mrs	r3, IPSR
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 8094 	bne.w	80015aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001482:	f3ef 8310 	mrs	r3, PRIMASK
 8001486:	623b      	str	r3, [r7, #32]
  return(result);
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 808d 	bne.w	80015aa <osThreadNew+0x146>
 8001490:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <osThreadNew+0x150>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d106      	bne.n	80014a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001498:	f3ef 8311 	mrs	r3, BASEPRI
 800149c:	61fb      	str	r3, [r7, #28]
  return(result);
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 8082 	bne.w	80015aa <osThreadNew+0x146>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d07e      	beq.n	80015aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80014b0:	2318      	movs	r3, #24
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80014b4:	2300      	movs	r3, #0
 80014b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80014b8:	f107 031b 	add.w	r3, r7, #27
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d045      	beq.n	8001556 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <osThreadNew+0x74>
        name = attr->name;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <osThreadNew+0x9a>
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	2b38      	cmp	r3, #56	; 0x38
 80014f0:	d805      	bhi.n	80014fe <osThreadNew+0x9a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <osThreadNew+0x9e>
        return (NULL);
 80014fe:	2300      	movs	r3, #0
 8001500:	e054      	b.n	80015ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00e      	beq.n	8001538 <osThreadNew+0xd4>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b5b      	cmp	r3, #91	; 0x5b
 8001520:	d90a      	bls.n	8001538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <osThreadNew+0xd4>
        mem = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
 8001536:	e010      	b.n	800155a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10c      	bne.n	800155a <osThreadNew+0xf6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d108      	bne.n	800155a <osThreadNew+0xf6>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d104      	bne.n	800155a <osThreadNew+0xf6>
          mem = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
 8001554:	e001      	b.n	800155a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	2b01      	cmp	r3, #1
 800155e:	d110      	bne.n	8001582 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fe12 	bl	80021a0 <xTaskCreateStatic>
 800157c:	4603      	mov	r3, r0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e013      	b.n	80015aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d110      	bne.n	80015aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	b29a      	uxth	r2, r3
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fe5c 	bl	8002258 <xTaskCreate>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <osThreadNew+0x146>
          hTask = NULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80015aa:	697b      	ldr	r3, [r7, #20]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000002c 	.word	0x2000002c

080015b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015c0:	f3ef 8305 	mrs	r3, IPSR
 80015c4:	613b      	str	r3, [r7, #16]
  return(result);
 80015c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015cc:	f3ef 8310 	mrs	r3, PRIMASK
 80015d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d109      	bne.n	80015ec <osDelay+0x34>
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <osDelay+0x58>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d109      	bne.n	80015f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015e0:	f3ef 8311 	mrs	r3, BASEPRI
 80015e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <osDelay+0x3c>
    stat = osErrorISR;
 80015ec:	f06f 0305 	mvn.w	r3, #5
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e007      	b.n	8001604 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <osDelay+0x4c>
      vTaskDelay(ticks);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 ff66 	bl	80024d0 <vTaskDelay>
    }
  }

  return (stat);
 8001604:	697b      	ldr	r3, [r7, #20]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000002c 	.word	0x2000002c

08001614 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4a06      	ldr	r2, [pc, #24]	; (800163c <vApplicationGetIdleTaskMemory+0x28>)
 8001624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <vApplicationGetIdleTaskMemory+0x2c>)
 800162a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000030 	.word	0x20000030
 8001640:	2000008c 	.word	0x2000008c

08001644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <vApplicationGetTimerTaskMemory+0x2c>)
 8001654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <vApplicationGetTimerTaskMemory+0x30>)
 800165a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000028c 	.word	0x2000028c
 8001674:	200002e8 	.word	0x200002e8

08001678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 0208 	add.w	r2, r3, #8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f103 0208 	add.w	r2, r3, #8
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0208 	add.w	r2, r3, #8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172a:	d103      	bne.n	8001734 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e00c      	b.n	800174e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3308      	adds	r3, #8
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e002      	b.n	8001742 <vListInsert+0x2e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	429a      	cmp	r2, r3
 800174c:	d2f6      	bcs.n	800173c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6892      	ldr	r2, [r2, #8]
 800179a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6852      	ldr	r2, [r2, #4]
 80017a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d103      	bne.n	80017b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10a      	bne.n	8001802 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f0:	f383 8811 	msr	BASEPRI, r3
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	f3bf 8f4f 	dsb	sy
 80017fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017fe:	bf00      	nop
 8001800:	e7fe      	b.n	8001800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001802:	f001 ffcb 	bl	800379c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	441a      	add	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	3b01      	subs	r3, #1
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	441a      	add	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	22ff      	movs	r2, #255	; 0xff
 8001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d114      	bne.n	8001882 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01a      	beq.n	8001896 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3310      	adds	r3, #16
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f8f1 	bl	8002a4c <xTaskRemoveFromEventList>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <xQueueGenericReset+0xcc>)
 8001872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	e009      	b.n	8001896 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3310      	adds	r3, #16
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fef6 	bl	8001678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3324      	adds	r3, #36	; 0x24
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fef1 	bl	8001678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001896:	f001 ffb1 	bl	80037fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	e000ed04 	.word	0xe000ed04

080018a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c0:	f383 8811 	msr	BASEPRI, r3
 80018c4:	f3bf 8f6f 	isb	sy
 80018c8:	f3bf 8f4f 	dsb	sy
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018ce:	bf00      	nop
 80018d0:	e7fe      	b.n	80018d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80018d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018dc:	f383 8811 	msr	BASEPRI, r3
 80018e0:	f3bf 8f6f 	isb	sy
 80018e4:	f3bf 8f4f 	dsb	sy
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80018ea:	bf00      	nop
 80018ec:	e7fe      	b.n	80018ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <xQueueGenericCreateStatic+0x52>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <xQueueGenericCreateStatic+0x56>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <xQueueGenericCreateStatic+0x58>
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	f383 8811 	msr	BASEPRI, r3
 800190c:	f3bf 8f6f 	isb	sy
 8001910:	f3bf 8f4f 	dsb	sy
 8001914:	623b      	str	r3, [r7, #32]
}
 8001916:	bf00      	nop
 8001918:	e7fe      	b.n	8001918 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <xQueueGenericCreateStatic+0x7e>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <xQueueGenericCreateStatic+0x82>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <xQueueGenericCreateStatic+0x84>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	61fb      	str	r3, [r7, #28]
}
 8001942:	bf00      	nop
 8001944:	e7fe      	b.n	8001944 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001946:	2350      	movs	r3, #80	; 0x50
 8001948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b50      	cmp	r3, #80	; 0x50
 800194e:	d00a      	beq.n	8001966 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001954:	f383 8811 	msr	BASEPRI, r3
 8001958:	f3bf 8f6f 	isb	sy
 800195c:	f3bf 8f4f 	dsb	sy
 8001960:	61bb      	str	r3, [r7, #24]
}
 8001962:	bf00      	nop
 8001964:	e7fe      	b.n	8001964 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001978:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f805 	bl	8001996 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800198e:	4618      	mov	r0, r3
 8001990:	3730      	adds	r7, #48	; 0x30
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e002      	b.n	80019b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019c4:	2101      	movs	r1, #1
 80019c6:	69b8      	ldr	r0, [r7, #24]
 80019c8:	f7ff ff06 	bl	80017d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	; 0x38
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <xQueueGenericSend+0x32>
	__asm volatile
 80019f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a0a:	bf00      	nop
 8001a0c:	e7fe      	b.n	8001a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <xQueueGenericSend+0x40>
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <xQueueGenericSend+0x44>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <xQueueGenericSend+0x46>
 8001a20:	2300      	movs	r3, #0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <xQueueGenericSend+0x60>
	__asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a38:	bf00      	nop
 8001a3a:	e7fe      	b.n	8001a3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d103      	bne.n	8001a4a <xQueueGenericSend+0x6e>
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <xQueueGenericSend+0x72>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <xQueueGenericSend+0x74>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10a      	bne.n	8001a6a <xQueueGenericSend+0x8e>
	__asm volatile
 8001a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	623b      	str	r3, [r7, #32]
}
 8001a66:	bf00      	nop
 8001a68:	e7fe      	b.n	8001a68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a6a:	f001 f9b1 	bl	8002dd0 <xTaskGetSchedulerState>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <xQueueGenericSend+0x9e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <xQueueGenericSend+0xa2>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <xQueueGenericSend+0xa4>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <xQueueGenericSend+0xbe>
	__asm volatile
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	61fb      	str	r3, [r7, #28]
}
 8001a96:	bf00      	nop
 8001a98:	e7fe      	b.n	8001a98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a9a:	f001 fe7f 	bl	800379c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d302      	bcc.n	8001ab0 <xQueueGenericSend+0xd4>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d129      	bne.n	8001b04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ab6:	f000 fa07 	bl	8001ec8 <prvCopyDataToQueue>
 8001aba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	3324      	adds	r3, #36	; 0x24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 ffbf 	bl	8002a4c <xTaskRemoveFromEventList>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <xQueueGenericSend+0x1f8>)
 8001ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	f3bf 8f6f 	isb	sy
 8001ae4:	e00a      	b.n	8001afc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <xQueueGenericSend+0x1f8>)
 8001aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001afc:	f001 fe7e 	bl	80037fc <vPortExitCritical>
				return pdPASS;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e063      	b.n	8001bcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b0a:	f001 fe77 	bl	80037fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e05c      	b.n	8001bcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fff9 	bl	8002b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b26:	f001 fe69 	bl	80037fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b2a:	f000 fd6b 	bl	8002604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b2e:	f001 fe35 	bl	800379c <vPortEnterCritical>
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d103      	bne.n	8001b48 <xQueueGenericSend+0x16c>
 8001b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d103      	bne.n	8001b5e <xQueueGenericSend+0x182>
 8001b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b5e:	f001 fe4d 	bl	80037fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b62:	1d3a      	adds	r2, r7, #4
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 ffe8 	bl	8002b40 <xTaskCheckForTimeOut>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d124      	bne.n	8001bc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b78:	f000 fa9e 	bl	80020b8 <prvIsQueueFull>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d018      	beq.n	8001bb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	3310      	adds	r3, #16
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 ff0e 	bl	80029ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b92:	f000 fa29 	bl	8001fe8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001b96:	f000 fd43 	bl	8002620 <xTaskResumeAll>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f47f af7c 	bne.w	8001a9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <xQueueGenericSend+0x1f8>)
 8001ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	e772      	b.n	8001a9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bb6:	f000 fa17 	bl	8001fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bba:	f000 fd31 	bl	8002620 <xTaskResumeAll>
 8001bbe:	e76c      	b.n	8001a9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bc2:	f000 fa11 	bl	8001fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bc6:	f000 fd2b 	bl	8002620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001bca:	2300      	movs	r3, #0
		}
	}
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c02:	bf00      	nop
 8001c04:	e7fe      	b.n	8001c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <xQueueGenericSendFromISR+0x3c>
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <xQueueGenericSendFromISR+0x40>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <xQueueGenericSendFromISR+0x42>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	623b      	str	r3, [r7, #32]
}
 8001c30:	bf00      	nop
 8001c32:	e7fe      	b.n	8001c32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d103      	bne.n	8001c42 <xQueueGenericSendFromISR+0x6a>
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <xQueueGenericSendFromISR+0x6e>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <xQueueGenericSendFromISR+0x70>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	61fb      	str	r3, [r7, #28]
}
 8001c5e:	bf00      	nop
 8001c60:	e7fe      	b.n	8001c60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c62:	f001 fe5d 	bl	8003920 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c66:	f3ef 8211 	mrs	r2, BASEPRI
 8001c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	61ba      	str	r2, [r7, #24]
 8001c7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <xQueueGenericSendFromISR+0xbc>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d12c      	bne.n	8001cee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ca4:	f000 f910 	bl	8001ec8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ca8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d112      	bne.n	8001cd8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	3324      	adds	r3, #36	; 0x24
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fec4 	bl	8002a4c <xTaskRemoveFromEventList>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001cec:	e001      	b.n	8001cf2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001cfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <xQueueReceive+0x30>
	__asm volatile
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	623b      	str	r3, [r7, #32]
}
 8001d34:	bf00      	nop
 8001d36:	e7fe      	b.n	8001d36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <xQueueReceive+0x3e>
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <xQueueReceive+0x42>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueReceive+0x44>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <xQueueReceive+0x5e>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	61fb      	str	r3, [r7, #28]
}
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d66:	f001 f833 	bl	8002dd0 <xTaskGetSchedulerState>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <xQueueReceive+0x6e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <xQueueReceive+0x72>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <xQueueReceive+0x74>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <xQueueReceive+0x8e>
	__asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	61bb      	str	r3, [r7, #24]
}
 8001d92:	bf00      	nop
 8001d94:	e7fe      	b.n	8001d94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d96:	f001 fd01 	bl	800379c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01f      	beq.n	8001de6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001daa:	f000 f8f7 	bl	8001f9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00f      	beq.n	8001dde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fe42 	bl	8002a4c <xTaskRemoveFromEventList>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <xQueueReceive+0x1bc>)
 8001dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f3bf 8f4f 	dsb	sy
 8001dda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001dde:	f001 fd0d 	bl	80037fc <vPortExitCritical>
				return pdPASS;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e069      	b.n	8001eba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dec:	f001 fd06 	bl	80037fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e062      	b.n	8001eba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fe88 	bl	8002b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e08:	f001 fcf8 	bl	80037fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e0c:	f000 fbfa 	bl	8002604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e10:	f001 fcc4 	bl	800379c <vPortEnterCritical>
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d103      	bne.n	8001e2a <xQueueReceive+0x122>
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	d103      	bne.n	8001e40 <xQueueReceive+0x138>
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e40:	f001 fcdc 	bl	80037fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e44:	1d3a      	adds	r2, r7, #4
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fe77 	bl	8002b40 <xTaskCheckForTimeOut>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d123      	bne.n	8001ea0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e5a:	f000 f917 	bl	800208c <prvIsQueueEmpty>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d017      	beq.n	8001e94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	3324      	adds	r3, #36	; 0x24
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fd9d 	bl	80029ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e74:	f000 f8b8 	bl	8001fe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e78:	f000 fbd2 	bl	8002620 <xTaskResumeAll>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d189      	bne.n	8001d96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <xQueueReceive+0x1bc>)
 8001e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	e780      	b.n	8001d96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e96:	f000 f8a7 	bl	8001fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e9a:	f000 fbc1 	bl	8002620 <xTaskResumeAll>
 8001e9e:	e77a      	b.n	8001d96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ea2:	f000 f8a1 	bl	8001fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ea6:	f000 fbbb 	bl	8002620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eac:	f000 f8ee 	bl	800208c <prvIsQueueEmpty>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f43f af6f 	beq.w	8001d96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001eb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d14d      	bne.n	8001f8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 ff8a 	bl	8002e0c <xTaskPriorityDisinherit>
 8001ef8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e043      	b.n	8001f8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d119      	bne.n	8001f3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	461a      	mov	r2, r3
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	f001 ff3e 	bl	8003d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	441a      	add	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d32b      	bcc.n	8001f8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e026      	b.n	8001f8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68d8      	ldr	r0, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	461a      	mov	r2, r3
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	f001 ff24 	bl	8003d94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	425b      	negs	r3, r3
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	425b      	negs	r3, r3
 8001f72:	441a      	add	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d105      	bne.n	8001f8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001f92:	697b      	ldr	r3, [r7, #20]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d018      	beq.n	8001fe0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	441a      	add	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d303      	bcc.n	8001fd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	461a      	mov	r2, r3
 8001fda:	6838      	ldr	r0, [r7, #0]
 8001fdc:	f001 feda 	bl	8003d94 <memcpy>
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001ff0:	f001 fbd4 	bl	800379c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ffa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffc:	e011      	b.n	8002022 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3324      	adds	r3, #36	; 0x24
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fd1e 	bl	8002a4c <xTaskRemoveFromEventList>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002016:	f000 fdf5 	bl	8002c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3b01      	subs	r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	dce9      	bgt.n	8001ffe <prvUnlockQueue+0x16>
 800202a:	e000      	b.n	800202e <prvUnlockQueue+0x46>
					break;
 800202c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002036:	f001 fbe1 	bl	80037fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800203a:	f001 fbaf 	bl	800379c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002044:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002046:	e011      	b.n	800206c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d012      	beq.n	8002076 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3310      	adds	r3, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fcf9 	bl	8002a4c <xTaskRemoveFromEventList>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002060:	f000 fdd0 	bl	8002c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	3b01      	subs	r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800206c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002070:	2b00      	cmp	r3, #0
 8002072:	dce9      	bgt.n	8002048 <prvUnlockQueue+0x60>
 8002074:	e000      	b.n	8002078 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002076:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002080:	f001 fbbc 	bl	80037fc <vPortExitCritical>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002094:	f001 fb82 	bl	800379c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e001      	b.n	80020aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020aa:	f001 fba7 	bl	80037fc <vPortExitCritical>

	return xReturn;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020c0:	f001 fb6c 	bl	800379c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d102      	bne.n	80020d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e001      	b.n	80020da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020da:	f001 fb8f 	bl	80037fc <vPortExitCritical>

	return xReturn;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e014      	b.n	8002122 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <vQueueAddToRegistry+0x4c>)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002104:	490b      	ldr	r1, [pc, #44]	; (8002134 <vQueueAddToRegistry+0x4c>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <vQueueAddToRegistry+0x4c>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800211a:	e006      	b.n	800212a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b07      	cmp	r3, #7
 8002126:	d9e7      	bls.n	80020f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	20001984 	.word	0x20001984

08002138 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002148:	f001 fb28 	bl	800379c <vPortEnterCritical>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002152:	b25b      	sxtb	r3, r3
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d103      	bne.n	8002162 <vQueueWaitForMessageRestricted+0x2a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002168:	b25b      	sxtb	r3, r3
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d103      	bne.n	8002178 <vQueueWaitForMessageRestricted+0x40>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002178:	f001 fb40 	bl	80037fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3324      	adds	r3, #36	; 0x24
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fc31 	bl	80029f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff28 	bl	8001fe8 <prvUnlockQueue>
	}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af04      	add	r7, sp, #16
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	623b      	str	r3, [r7, #32]
}
 80021c6:	bf00      	nop
 80021c8:	e7fe      	b.n	80021c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	61fb      	str	r3, [r7, #28]
}
 80021e2:	bf00      	nop
 80021e4:	e7fe      	b.n	80021e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021e6:	235c      	movs	r3, #92	; 0x5c
 80021e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b5c      	cmp	r3, #92	; 0x5c
 80021ee:	d00a      	beq.n	8002206 <xTaskCreateStatic+0x66>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	61bb      	str	r3, [r7, #24]
}
 8002202:	bf00      	nop
 8002204:	e7fe      	b.n	8002204 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <xTaskCreateStatic+0xaa>
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01b      	beq.n	800224a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800221a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002224:	2300      	movs	r3, #0
 8002226:	9303      	str	r3, [sp, #12]
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f850 	bl	80022e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002244:	f000 f8d4 	bl	80023f0 <prvAddNewTaskToReadyList>
 8002248:	e001      	b.n	800224e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800224e:	697b      	ldr	r3, [r7, #20]
	}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af04      	add	r7, sp, #16
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fb95 	bl	800399c <pvPortMalloc>
 8002272:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00e      	beq.n	8002298 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800227a:	205c      	movs	r0, #92	; 0x5c
 800227c:	f001 fb8e 	bl	800399c <pvPortMalloc>
 8002280:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	e005      	b.n	800229c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	f001 fc47 	bl	8003b24 <vPortFree>
 8002296:	e001      	b.n	800229c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d017      	beq.n	80022d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	2300      	movs	r3, #0
 80022ae:	9303      	str	r3, [sp, #12]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f80e 	bl	80022e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022c6:	69f8      	ldr	r0, [r7, #28]
 80022c8:	f000 f892 	bl	80023f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022cc:	2301      	movs	r3, #1
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e002      	b.n	80022d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022d8:	69bb      	ldr	r3, [r7, #24]
	}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b088      	sub	sp, #32
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	21a5      	movs	r1, #165	; 0xa5
 80022fc:	f001 fd58 	bl	8003db0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800230a:	3b01      	subs	r3, #1
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f023 0307 	bic.w	r3, r3, #7
 8002318:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	617b      	str	r3, [r7, #20]
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e012      	b.n	8002366 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	7819      	ldrb	r1, [r3, #0]
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	3334      	adds	r3, #52	; 0x34
 8002350:	460a      	mov	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	3301      	adds	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d9e9      	bls.n	8002340 <prvInitialiseNewTask+0x5e>
 800236c:	e000      	b.n	8002370 <prvInitialiseNewTask+0x8e>
		{
			break;
 800236e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	2b37      	cmp	r3, #55	; 0x37
 800237c:	d901      	bls.n	8002382 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800237e:	2337      	movs	r3, #55	; 0x37
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	2200      	movs	r2, #0
 8002392:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	3304      	adds	r3, #4
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f98c 	bl	80016b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	3318      	adds	r3, #24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f987 	bl	80016b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	68f9      	ldr	r1, [r7, #12]
 80023d0:	69b8      	ldr	r0, [r7, #24]
 80023d2:	f001 f8ef 	bl	80035b4 <pxPortInitialiseStack>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023e8:	bf00      	nop
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80023f8:	f001 f9d0 	bl	800379c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <prvAddNewTaskToReadyList+0xc4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <prvAddNewTaskToReadyList+0xc4>)
 8002404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <prvAddNewTaskToReadyList+0xc8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <prvAddNewTaskToReadyList+0xc8>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <prvAddNewTaskToReadyList+0xc4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d110      	bne.n	800243e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800241c:	f000 fc16 	bl	8002c4c <prvInitialiseTaskLists>
 8002420:	e00d      	b.n	800243e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <prvAddNewTaskToReadyList+0xcc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <prvAddNewTaskToReadyList+0xc8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	429a      	cmp	r2, r3
 8002436:	d802      	bhi.n	800243e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <prvAddNewTaskToReadyList+0xc8>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <prvAddNewTaskToReadyList+0xd0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <prvAddNewTaskToReadyList+0xd0>)
 8002446:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <prvAddNewTaskToReadyList+0xd0>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <prvAddNewTaskToReadyList+0xd4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d903      	bls.n	8002464 <prvAddNewTaskToReadyList+0x74>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <prvAddNewTaskToReadyList+0xd4>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <prvAddNewTaskToReadyList+0xd8>)
 8002472:	441a      	add	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7ff f927 	bl	80016ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002480:	f001 f9bc 	bl	80037fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <prvAddNewTaskToReadyList+0xcc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvAddNewTaskToReadyList+0xc8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	429a      	cmp	r2, r3
 8002498:	d207      	bcs.n	80024aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <prvAddNewTaskToReadyList+0xdc>)
 800249c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000bbc 	.word	0x20000bbc
 80024b8:	200006e8 	.word	0x200006e8
 80024bc:	20000bc8 	.word	0x20000bc8
 80024c0:	20000bd8 	.word	0x20000bd8
 80024c4:	20000bc4 	.word	0x20000bc4
 80024c8:	200006ec 	.word	0x200006ec
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <vTaskDelay+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <vTaskDelay+0x30>
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	60bb      	str	r3, [r7, #8]
}
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002500:	f000 f880 	bl	8002604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fcee 	bl	8002ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800250c:	f000 f888 	bl	8002620 <xTaskResumeAll>
 8002510:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <vTaskDelay+0x64>)
 800251a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000be4 	.word	0x20000be4
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002546:	463a      	mov	r2, r7
 8002548:	1d39      	adds	r1, r7, #4
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f860 	bl	8001614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	460a      	mov	r2, r1
 8002566:	4921      	ldr	r1, [pc, #132]	; (80025ec <vTaskStartScheduler+0xb4>)
 8002568:	4821      	ldr	r0, [pc, #132]	; (80025f0 <vTaskStartScheduler+0xb8>)
 800256a:	f7ff fe19 	bl	80021a0 <xTaskCreateStatic>
 800256e:	4603      	mov	r3, r0
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <vTaskStartScheduler+0xbc>)
 8002572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <vTaskStartScheduler+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e001      	b.n	8002586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800258c:	f000 fd00 	bl	8002f90 <xTimerCreateTimerTask>
 8002590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d116      	bne.n	80025c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	613b      	str	r3, [r7, #16]
}
 80025aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <vTaskStartScheduler+0xc0>)
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <vTaskStartScheduler+0xc4>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <vTaskStartScheduler+0xc8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025c0:	f001 f87a 	bl	80036b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025c4:	e00e      	b.n	80025e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d10a      	bne.n	80025e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	60fb      	str	r3, [r7, #12]
}
 80025e0:	bf00      	nop
 80025e2:	e7fe      	b.n	80025e2 <vTaskStartScheduler+0xaa>
}
 80025e4:	bf00      	nop
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08003df4 	.word	0x08003df4
 80025f0:	08002c1d 	.word	0x08002c1d
 80025f4:	20000be0 	.word	0x20000be0
 80025f8:	20000bdc 	.word	0x20000bdc
 80025fc:	20000bc8 	.word	0x20000bc8
 8002600:	20000bc0 	.word	0x20000bc0

08002604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <vTaskSuspendAll+0x18>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a03      	ldr	r2, [pc, #12]	; (800261c <vTaskSuspendAll+0x18>)
 8002610:	6013      	str	r3, [r2, #0]
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000be4 	.word	0x20000be4

08002620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <xTaskResumeAll+0x118>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <xTaskResumeAll+0x2c>
	__asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	603b      	str	r3, [r7, #0]
}
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800264c:	f001 f8a6 	bl	800379c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <xTaskResumeAll+0x118>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3b01      	subs	r3, #1
 8002656:	4a38      	ldr	r2, [pc, #224]	; (8002738 <xTaskResumeAll+0x118>)
 8002658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <xTaskResumeAll+0x118>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d162      	bne.n	8002728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <xTaskResumeAll+0x11c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d05e      	beq.n	8002728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266a:	e02f      	b.n	80026cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <xTaskResumeAll+0x120>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3318      	adds	r3, #24
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f883 	bl	8001784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f87e 	bl	8001784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <xTaskResumeAll+0x124>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d903      	bls.n	800269c <xTaskResumeAll+0x7c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <xTaskResumeAll+0x124>)
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <xTaskResumeAll+0x128>)
 80026aa:	441a      	add	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7ff f80b 	bl	80016ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <xTaskResumeAll+0x12c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <xTaskResumeAll+0x130>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <xTaskResumeAll+0x120>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1cb      	bne.n	800266c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026da:	f000 fb55 	bl	8002d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <xTaskResumeAll+0x134>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026ea:	f000 f845 	bl	8002778 <xTaskIncrementTick>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <xTaskResumeAll+0x130>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f1      	bne.n	80026ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <xTaskResumeAll+0x134>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <xTaskResumeAll+0x130>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002714:	2301      	movs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <xTaskResumeAll+0x138>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002728:	f001 f868 	bl	80037fc <vPortExitCritical>

	return xAlreadyYielded;
 800272c:	68bb      	ldr	r3, [r7, #8]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000be4 	.word	0x20000be4
 800273c:	20000bbc 	.word	0x20000bbc
 8002740:	20000b7c 	.word	0x20000b7c
 8002744:	20000bc4 	.word	0x20000bc4
 8002748:	200006ec 	.word	0x200006ec
 800274c:	200006e8 	.word	0x200006e8
 8002750:	20000bd0 	.word	0x20000bd0
 8002754:	20000bcc 	.word	0x20000bcc
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <xTaskGetTickCount+0x18>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002768:	687b      	ldr	r3, [r7, #4]
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000bc0 	.word	0x20000bc0

08002778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002782:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <xTaskIncrementTick+0x150>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 808e 	bne.w	80028a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <xTaskIncrementTick+0x154>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <xTaskIncrementTick+0x154>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d120      	bne.n	80027e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <xTaskIncrementTick+0x158>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	603b      	str	r3, [r7, #0]
}
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <xTaskIncrementTick+0x46>
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <xTaskIncrementTick+0x158>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <xTaskIncrementTick+0x15c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <xTaskIncrementTick+0x158>)
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4a41      	ldr	r2, [pc, #260]	; (80028d4 <xTaskIncrementTick+0x15c>)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <xTaskIncrementTick+0x160>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <xTaskIncrementTick+0x160>)
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	f000 fad3 	bl	8002d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <xTaskIncrementTick+0x164>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d34e      	bcc.n	800288a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <xTaskIncrementTick+0x158>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <xTaskIncrementTick+0x82>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xTaskIncrementTick+0x84>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <xTaskIncrementTick+0x164>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	601a      	str	r2, [r3, #0]
					break;
 8002808:	e03f      	b.n	800288a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <xTaskIncrementTick+0x158>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d203      	bcs.n	800282a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002822:	4a2e      	ldr	r2, [pc, #184]	; (80028dc <xTaskIncrementTick+0x164>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6013      	str	r3, [r2, #0]
						break;
 8002828:	e02f      	b.n	800288a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3304      	adds	r3, #4
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe ffa8 	bl	8001784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3318      	adds	r3, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff9f 	bl	8001784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <xTaskIncrementTick+0x168>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d903      	bls.n	800285a <xTaskIncrementTick+0xe2>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <xTaskIncrementTick+0x168>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <xTaskIncrementTick+0x16c>)
 8002868:	441a      	add	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3304      	adds	r3, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7fe ff2c 	bl	80016ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <xTaskIncrementTick+0x170>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d3b3      	bcc.n	80027ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002888:	e7b0      	b.n	80027ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <xTaskIncrementTick+0x170>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	4914      	ldr	r1, [pc, #80]	; (80028e4 <xTaskIncrementTick+0x16c>)
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d907      	bls.n	80028b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e004      	b.n	80028b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <xTaskIncrementTick+0x174>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <xTaskIncrementTick+0x174>)
 80028b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <xTaskIncrementTick+0x178>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80028be:	697b      	ldr	r3, [r7, #20]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000be4 	.word	0x20000be4
 80028cc:	20000bc0 	.word	0x20000bc0
 80028d0:	20000b74 	.word	0x20000b74
 80028d4:	20000b78 	.word	0x20000b78
 80028d8:	20000bd4 	.word	0x20000bd4
 80028dc:	20000bdc 	.word	0x20000bdc
 80028e0:	20000bc4 	.word	0x20000bc4
 80028e4:	200006ec 	.word	0x200006ec
 80028e8:	200006e8 	.word	0x200006e8
 80028ec:	20000bcc 	.word	0x20000bcc
 80028f0:	20000bd0 	.word	0x20000bd0

080028f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <vTaskSwitchContext+0xa4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <vTaskSwitchContext+0xa8>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002908:	e041      	b.n	800298e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <vTaskSwitchContext+0xa8>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <vTaskSwitchContext+0xac>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e010      	b.n	800293a <vTaskSwitchContext+0x46>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <vTaskSwitchContext+0x40>
	__asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	607b      	str	r3, [r7, #4]
}
 8002930:	bf00      	nop
 8002932:	e7fe      	b.n	8002932 <vTaskSwitchContext+0x3e>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <vTaskSwitchContext+0xb0>)
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0e4      	beq.n	8002918 <vTaskSwitchContext+0x24>
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <vTaskSwitchContext+0xb0>)
 800295a:	4413      	add	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3308      	adds	r3, #8
 8002970:	429a      	cmp	r2, r3
 8002972:	d104      	bne.n	800297e <vTaskSwitchContext+0x8a>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <vTaskSwitchContext+0xb4>)
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <vTaskSwitchContext+0xac>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000be4 	.word	0x20000be4
 800299c:	20000bd0 	.word	0x20000bd0
 80029a0:	20000bc4 	.word	0x20000bc4
 80029a4:	200006ec 	.word	0x200006ec
 80029a8:	200006e8 	.word	0x200006e8

080029ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60fb      	str	r3, [r7, #12]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <vTaskPlaceOnEventList+0x44>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3318      	adds	r3, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fe9a 	bl	8001714 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029e0:	2101      	movs	r1, #1
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f000 fa80 	bl	8002ee8 <prvAddCurrentTaskToDelayedList>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200006e8 	.word	0x200006e8

080029f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	617b      	str	r3, [r7, #20]
}
 8002a18:	bf00      	nop
 8002a1a:	e7fe      	b.n	8002a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3318      	adds	r3, #24
 8002a22:	4619      	mov	r1, r3
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7fe fe52 	bl	80016ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 fa55 	bl	8002ee8 <prvAddCurrentTaskToDelayedList>
	}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200006e8 	.word	0x200006e8

08002a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	60fb      	str	r3, [r7, #12]
}
 8002a74:	bf00      	nop
 8002a76:	e7fe      	b.n	8002a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fe81 	bl	8001784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <xTaskRemoveFromEventList+0xb0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11d      	bne.n	8002ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fe78 	bl	8001784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <xTaskRemoveFromEventList+0xb4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d903      	bls.n	8002aa8 <xTaskRemoveFromEventList+0x5c>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <xTaskRemoveFromEventList+0xb4>)
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <xTaskRemoveFromEventList+0xb8>)
 8002ab6:	441a      	add	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7fe fe05 	bl	80016ce <vListInsertEnd>
 8002ac4:	e005      	b.n	8002ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	3318      	adds	r3, #24
 8002aca:	4619      	mov	r1, r3
 8002acc:	480e      	ldr	r0, [pc, #56]	; (8002b08 <xTaskRemoveFromEventList+0xbc>)
 8002ace:	f7fe fdfe 	bl	80016ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <xTaskRemoveFromEventList+0xc0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d905      	bls.n	8002aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <xTaskRemoveFromEventList+0xc4>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e001      	b.n	8002af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002af0:	697b      	ldr	r3, [r7, #20]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000be4 	.word	0x20000be4
 8002b00:	20000bc4 	.word	0x20000bc4
 8002b04:	200006ec 	.word	0x200006ec
 8002b08:	20000b7c 	.word	0x20000b7c
 8002b0c:	200006e8 	.word	0x200006e8
 8002b10:	20000bd0 	.word	0x20000bd0

08002b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <vTaskInternalSetTimeOutState+0x24>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <vTaskInternalSetTimeOutState+0x28>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	605a      	str	r2, [r3, #4]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000bd4 	.word	0x20000bd4
 8002b3c:	20000bc0 	.word	0x20000bc0

08002b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	613b      	str	r3, [r7, #16]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	60fb      	str	r3, [r7, #12]
}
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002b82:	f000 fe0b 	bl	800379c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <xTaskCheckForTimeOut+0xbc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d102      	bne.n	8002ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e023      	b.n	8002bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <xTaskCheckForTimeOut+0xc0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d007      	beq.n	8002bc2 <xTaskCheckForTimeOut+0x82>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e015      	b.n	8002bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d20b      	bcs.n	8002be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff9b 	bl	8002b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e004      	b.n	8002bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002bee:	f000 fe05 	bl	80037fc <vPortExitCritical>

	return xReturn;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000bc0 	.word	0x20000bc0
 8002c00:	20000bd4 	.word	0x20000bd4

08002c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <vTaskMissedYield+0x14>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000bd0 	.word	0x20000bd0

08002c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c24:	f000 f852 	bl	8002ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvIdleTask+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d9f9      	bls.n	8002c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <prvIdleTask+0x2c>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c40:	e7f0      	b.n	8002c24 <prvIdleTask+0x8>
 8002c42:	bf00      	nop
 8002c44:	200006ec 	.word	0x200006ec
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e00c      	b.n	8002c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <prvInitialiseTaskLists+0x60>)
 8002c64:	4413      	add	r3, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fd06 	bl	8001678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b37      	cmp	r3, #55	; 0x37
 8002c76:	d9ef      	bls.n	8002c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c7a:	f7fe fcfd 	bl	8001678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002c80:	f7fe fcfa 	bl	8001678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <prvInitialiseTaskLists+0x6c>)
 8002c86:	f7fe fcf7 	bl	8001678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <prvInitialiseTaskLists+0x70>)
 8002c8c:	f7fe fcf4 	bl	8001678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <prvInitialiseTaskLists+0x74>)
 8002c92:	f7fe fcf1 	bl	8001678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <prvInitialiseTaskLists+0x78>)
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvInitialiseTaskLists+0x7c>)
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200006ec 	.word	0x200006ec
 8002cb0:	20000b4c 	.word	0x20000b4c
 8002cb4:	20000b60 	.word	0x20000b60
 8002cb8:	20000b7c 	.word	0x20000b7c
 8002cbc:	20000b90 	.word	0x20000b90
 8002cc0:	20000ba8 	.word	0x20000ba8
 8002cc4:	20000b74 	.word	0x20000b74
 8002cc8:	20000b78 	.word	0x20000b78

08002ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd2:	e019      	b.n	8002d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cd4:	f000 fd62 	bl	800379c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fd4d 	bl	8001784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cfe:	f000 fd7d 	bl	80037fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f810 	bl	8002d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <prvCheckTasksWaitingTermination+0x58>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e1      	bne.n	8002cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000b90 	.word	0x20000b90
 8002d20:	20000bbc 	.word	0x20000bbc
 8002d24:	20000ba4 	.word	0x20000ba4

08002d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fef0 	bl	8003b24 <vPortFree>
				vPortFree( pxTCB );
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 feed 	bl	8003b24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d4a:	e018      	b.n	8002d7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d103      	bne.n	8002d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fee4 	bl	8003b24 <vPortFree>
	}
 8002d5c:	e00f      	b.n	8002d7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d00a      	beq.n	8002d7e <prvDeleteTCB+0x56>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <prvDeleteTCB+0x54>
	}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <prvResetNextTaskUnblockTime+0x40>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <prvResetNextTaskUnblockTime+0x14>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <prvResetNextTaskUnblockTime+0x16>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <prvResetNextTaskUnblockTime+0x44>)
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002daa:	e008      	b.n	8002dbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <prvResetNextTaskUnblockTime+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <prvResetNextTaskUnblockTime+0x44>)
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000b74 	.word	0x20000b74
 8002dcc:	20000bdc 	.word	0x20000bdc

08002dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <xTaskGetSchedulerState+0x34>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dde:	2301      	movs	r3, #1
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	e008      	b.n	8002df6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <xTaskGetSchedulerState+0x38>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002dec:	2302      	movs	r3, #2
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	e001      	b.n	8002df6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002df6:	687b      	ldr	r3, [r7, #4]
	}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000bc8 	.word	0x20000bc8
 8002e08:	20000be4 	.word	0x20000be4

08002e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d056      	beq.n	8002ed0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <xTaskPriorityDisinherit+0xd0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d00a      	beq.n	8002e42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	60fb      	str	r3, [r7, #12]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	1e5a      	subs	r2, r3, #1
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d02c      	beq.n	8002ed0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d128      	bne.n	8002ed0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc7e 	bl	8001784 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <xTaskPriorityDisinherit+0xd4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d903      	bls.n	8002eb0 <xTaskPriorityDisinherit+0xa4>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <xTaskPriorityDisinherit+0xd4>)
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <xTaskPriorityDisinherit+0xd8>)
 8002ebe:	441a      	add	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f7fe fc01 	bl	80016ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002ed0:	697b      	ldr	r3, [r7, #20]
	}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200006e8 	.word	0x200006e8
 8002ee0:	20000bc4 	.word	0x20000bc4
 8002ee4:	200006ec 	.word	0x200006ec

08002ee8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <prvAddCurrentTaskToDelayedList+0x90>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fc40 	bl	8001784 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d10a      	bne.n	8002f22 <prvAddCurrentTaskToDelayedList+0x3a>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4819      	ldr	r0, [pc, #100]	; (8002f80 <prvAddCurrentTaskToDelayedList+0x98>)
 8002f1c:	f7fe fbd7 	bl	80016ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f20:	e026      	b.n	8002f70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d209      	bcs.n	8002f4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe fbe4 	bl	8001714 <vListInsert>
}
 8002f4c:	e010      	b.n	8002f70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7fe fbda 	bl	8001714 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d202      	bcs.n	8002f70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000bc0 	.word	0x20000bc0
 8002f7c:	200006e8 	.word	0x200006e8
 8002f80:	20000ba8 	.word	0x20000ba8
 8002f84:	20000b78 	.word	0x20000b78
 8002f88:	20000b74 	.word	0x20000b74
 8002f8c:	20000bdc 	.word	0x20000bdc

08002f90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002f9a:	f000 facb 	bl	8003534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <xTimerCreateTimerTask+0x80>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d021      	beq.n	8002fea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002fae:	1d3a      	adds	r2, r7, #4
 8002fb0:	f107 0108 	add.w	r1, r7, #8
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fb43 	bl	8001644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	9202      	str	r2, [sp, #8]
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	460a      	mov	r2, r1
 8002fd0:	4910      	ldr	r1, [pc, #64]	; (8003014 <xTimerCreateTimerTask+0x84>)
 8002fd2:	4811      	ldr	r0, [pc, #68]	; (8003018 <xTimerCreateTimerTask+0x88>)
 8002fd4:	f7ff f8e4 	bl	80021a0 <xTaskCreateStatic>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <xTimerCreateTimerTask+0x8c>)
 8002fdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <xTimerCreateTimerTask+0x8c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	613b      	str	r3, [r7, #16]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003006:	697b      	ldr	r3, [r7, #20]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000c18 	.word	0x20000c18
 8003014:	08003dfc 	.word	0x08003dfc
 8003018:	0800313d 	.word	0x0800313d
 800301c:	20000c1c 	.word	0x20000c1c

08003020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	623b      	str	r3, [r7, #32]
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <xTimerGenericCommand+0x98>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02a      	beq.n	80030ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	dc18      	bgt.n	800309a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003068:	f7ff feb2 	bl	8002dd0 <xTaskGetSchedulerState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b02      	cmp	r3, #2
 8003070:	d109      	bne.n	8003086 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <xTimerGenericCommand+0x98>)
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f107 0110 	add.w	r1, r7, #16
 800307a:	2300      	movs	r3, #0
 800307c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307e:	f7fe fcad 	bl	80019dc <xQueueGenericSend>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24
 8003084:	e012      	b.n	80030ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <xTimerGenericCommand+0x98>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f107 0110 	add.w	r1, r7, #16
 800308e:	2300      	movs	r3, #0
 8003090:	2200      	movs	r2, #0
 8003092:	f7fe fca3 	bl	80019dc <xQueueGenericSend>
 8003096:	6278      	str	r0, [r7, #36]	; 0x24
 8003098:	e008      	b.n	80030ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <xTimerGenericCommand+0x98>)
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f107 0110 	add.w	r1, r7, #16
 80030a2:	2300      	movs	r3, #0
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	f7fe fd97 	bl	8001bd8 <xQueueGenericSendFromISR>
 80030aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000c18 	.word	0x20000c18

080030bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <prvProcessExpiredTimer+0x7c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fb55 	bl	8001784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d122      	bne.n	8003128 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	18d1      	adds	r1, r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f000 f8c8 	bl	8003284 <prvInsertTimerInActiveList>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2300      	movs	r3, #0
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	2100      	movs	r1, #0
 8003104:	6978      	ldr	r0, [r7, #20]
 8003106:	f7ff ff8b 	bl	8003020 <xTimerGenericCommand>
 800310a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60fb      	str	r3, [r7, #12]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	4798      	blx	r3
}
 8003130:	bf00      	nop
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000c10 	.word	0x20000c10

0800313c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003144:	f107 0308 	add.w	r3, r7, #8
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f857 	bl	80031fc <prvGetNextExpireTime>
 800314e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4619      	mov	r1, r3
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f803 	bl	8003160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800315a:	f000 f8d5 	bl	8003308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800315e:	e7f1      	b.n	8003144 <prvTimerTask+0x8>

08003160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800316a:	f7ff fa4b 	bl	8002604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f866 	bl	8003244 <prvSampleTimeNow>
 8003178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d130      	bne.n	80031e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <prvProcessTimerOrBlockTask+0x3c>
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	429a      	cmp	r2, r3
 800318c:	d806      	bhi.n	800319c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800318e:	f7ff fa47 	bl	8002620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff91 	bl	80030bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800319a:	e024      	b.n	80031e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <prvProcessTimerOrBlockTask+0x90>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <prvProcessTimerOrBlockTask+0x94>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fe ffb9 	bl	8002138 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80031c6:	f7ff fa2b 	bl	8002620 <xTaskResumeAll>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <prvProcessTimerOrBlockTask+0x98>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
}
 80031e0:	e001      	b.n	80031e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80031e2:	f7ff fa1d 	bl	8002620 <xTaskResumeAll>
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000c14 	.word	0x20000c14
 80031f4:	20000c18 	.word	0x20000c18
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <prvGetNextExpireTime+0x44>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <prvGetNextExpireTime+0x44>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e001      	b.n	8003232 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000c10 	.word	0x20000c10

08003244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800324c:	f7ff fa86 	bl	800275c <xTaskGetTickCount>
 8003250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <prvSampleTimeNow+0x3c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d205      	bcs.n	8003268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800325c:	f000 f908 	bl	8003470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e002      	b.n	800326e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <prvSampleTimeNow+0x3c>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003274:	68fb      	ldr	r3, [r7, #12]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000c20 	.word	0x20000c20

08003284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d812      	bhi.n	80032d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e01b      	b.n	80032f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <prvInsertTimerInActiveList+0x7c>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7fe fa23 	bl	8001714 <vListInsert>
 80032ce:	e012      	b.n	80032f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d206      	bcs.n	80032e6 <prvInsertTimerInActiveList+0x62>
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d302      	bcc.n	80032e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e007      	b.n	80032f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <prvInsertTimerInActiveList+0x80>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fe fa0f 	bl	8001714 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80032f6:	697b      	ldr	r3, [r7, #20]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000c14 	.word	0x20000c14
 8003304:	20000c10 	.word	0x20000c10

08003308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800330e:	e09d      	b.n	800344c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	da18      	bge.n	8003348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	3304      	adds	r3, #4
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61fb      	str	r3, [r7, #28]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333e:	6850      	ldr	r0, [r2, #4]
 8003340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	4611      	mov	r1, r2
 8003346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db7d      	blt.n	800344a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	3304      	adds	r3, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fa10 	bl	8001784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003364:	463b      	mov	r3, r7
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff6c 	bl	8003244 <prvSampleTimeNow>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b09      	cmp	r3, #9
 8003372:	d86b      	bhi.n	800344c <prvProcessReceivedCommands+0x144>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <prvProcessReceivedCommands+0x74>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033a5 	.word	0x080033a5
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033a5 	.word	0x080033a5
 8003388:	0800344d 	.word	0x0800344d
 800338c:	08003401 	.word	0x08003401
 8003390:	08003439 	.word	0x08003439
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033a5 	.word	0x080033a5
 800339c:	0800344d 	.word	0x0800344d
 80033a0:	08003401 	.word	0x08003401
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	18d1      	adds	r1, r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b2:	f7ff ff67 	bl	8003284 <prvInsertTimerInActiveList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d047      	beq.n	800344c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d13f      	bne.n	800344c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	441a      	add	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033de:	f7ff fe1f 	bl	8003020 <xTimerGenericCommand>
 80033e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d130      	bne.n	800344c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	61bb      	str	r3, [r7, #24]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	617b      	str	r3, [r7, #20]
}
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	18d1      	adds	r1, r2, r3
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003432:	f7ff ff27 	bl	8003284 <prvInsertTimerInActiveList>
					break;
 8003436:	e009      	b.n	800344c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003444:	f000 fb6e 	bl	8003b24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003448:	e000      	b.n	800344c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800344a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <prvProcessReceivedCommands+0x164>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1d39      	adds	r1, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fc57 	bl	8001d08 <xQueueReceive>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f af57 	bne.w	8003310 <prvProcessReceivedCommands+0x8>
	}
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000c18 	.word	0x20000c18

08003470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003476:	e045      	b.n	8003504 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <prvSwitchTimerLists+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <prvSwitchTimerLists+0xbc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe f977 	bl	8001784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d12e      	bne.n	8003504 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d90e      	bls.n	80034d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <prvSwitchTimerLists+0xbc>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7fe f920 	bl	8001714 <vListInsert>
 80034d4:	e016      	b.n	8003504 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	2100      	movs	r1, #0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fd9d 	bl	8003020 <xTimerGenericCommand>
 80034e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <prvSwitchTimerLists+0x94>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	603b      	str	r3, [r7, #0]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <prvSwitchTimerLists+0xbc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1b4      	bne.n	8003478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <prvSwitchTimerLists+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <prvSwitchTimerLists+0xc0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <prvSwitchTimerLists+0xbc>)
 800351a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <prvSwitchTimerLists+0xc0>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6013      	str	r3, [r2, #0]
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000c10 	.word	0x20000c10
 8003530:	20000c14 	.word	0x20000c14

08003534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800353a:	f000 f92f 	bl	800379c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <prvCheckForValidListAndQueue+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d120      	bne.n	8003588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003546:	4814      	ldr	r0, [pc, #80]	; (8003598 <prvCheckForValidListAndQueue+0x64>)
 8003548:	f7fe f896 	bl	8001678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800354c:	4813      	ldr	r0, [pc, #76]	; (800359c <prvCheckForValidListAndQueue+0x68>)
 800354e:	f7fe f893 	bl	8001678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <prvCheckForValidListAndQueue+0x6c>)
 8003554:	4a10      	ldr	r2, [pc, #64]	; (8003598 <prvCheckForValidListAndQueue+0x64>)
 8003556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <prvCheckForValidListAndQueue+0x70>)
 800355a:	4a10      	ldr	r2, [pc, #64]	; (800359c <prvCheckForValidListAndQueue+0x68>)
 800355c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <prvCheckForValidListAndQueue+0x74>)
 8003564:	4a11      	ldr	r2, [pc, #68]	; (80035ac <prvCheckForValidListAndQueue+0x78>)
 8003566:	2110      	movs	r1, #16
 8003568:	200a      	movs	r0, #10
 800356a:	f7fe f99d 	bl	80018a8 <xQueueGenericCreateStatic>
 800356e:	4603      	mov	r3, r0
 8003570:	4a08      	ldr	r2, [pc, #32]	; (8003594 <prvCheckForValidListAndQueue+0x60>)
 8003572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <prvCheckForValidListAndQueue+0x60>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <prvCheckForValidListAndQueue+0x60>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	490b      	ldr	r1, [pc, #44]	; (80035b0 <prvCheckForValidListAndQueue+0x7c>)
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fdb0 	bl	80020e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003588:	f000 f938 	bl	80037fc <vPortExitCritical>
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000c18 	.word	0x20000c18
 8003598:	20000be8 	.word	0x20000be8
 800359c:	20000bfc 	.word	0x20000bfc
 80035a0:	20000c10 	.word	0x20000c10
 80035a4:	20000c14 	.word	0x20000c14
 80035a8:	20000cc4 	.word	0x20000cc4
 80035ac:	20000c24 	.word	0x20000c24
 80035b0:	08003e04 	.word	0x08003e04

080035b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3b04      	subs	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b04      	subs	r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f023 0201 	bic.w	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3b04      	subs	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035e4:	4a08      	ldr	r2, [pc, #32]	; (8003608 <pxPortInitialiseStack+0x54>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3b14      	subs	r3, #20
 80035ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b20      	subs	r3, #32
 80035fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035fc:	68fb      	ldr	r3, [r7, #12]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	0800360d 	.word	0x0800360d

0800360c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <prvTaskExitError+0x54>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d00a      	beq.n	8003636 <prvTaskExitError+0x2a>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <prvTaskExitError+0x28>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
}
 8003648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800364a:	bf00      	nop
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0fc      	beq.n	800364c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000000c 	.word	0x2000000c
	...

08003670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <pxCurrentTCBConst2>)
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	6808      	ldr	r0, [r1, #0]
 8003676:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800367a:	f380 8809 	msr	PSP, r0
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f380 8811 	msr	BASEPRI, r0
 800368a:	f04e 0e0d 	orr.w	lr, lr, #13
 800368e:	4770      	bx	lr

08003690 <pxCurrentTCBConst2>:
 8003690:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop

08003698 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003698:	4806      	ldr	r0, [pc, #24]	; (80036b4 <prvPortStartFirstTask+0x1c>)
 800369a:	6800      	ldr	r0, [r0, #0]
 800369c:	6800      	ldr	r0, [r0, #0]
 800369e:	f380 8808 	msr	MSP, r0
 80036a2:	b662      	cpsie	i
 80036a4:	b661      	cpsie	f
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	df00      	svc	0
 80036b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036b2:	bf00      	nop
 80036b4:	e000ed08 	.word	0xe000ed08

080036b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036be:	4b32      	ldr	r3, [pc, #200]	; (8003788 <xPortStartScheduler+0xd0>)
 80036c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <xPortStartScheduler+0xd4>)
 80036e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <xPortStartScheduler+0xd8>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036ec:	e009      	b.n	8003702 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <xPortStartScheduler+0xd8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <xPortStartScheduler+0xd8>)
 80036f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d0ef      	beq.n	80036ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <xPortStartScheduler+0xd8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	d00a      	beq.n	8003730 <xPortStartScheduler+0x78>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	60bb      	str	r3, [r7, #8]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <xPortStartScheduler+0xd8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <xPortStartScheduler+0xd8>)
 8003738:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <xPortStartScheduler+0xd8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <xPortStartScheduler+0xd8>)
 8003744:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <xPortStartScheduler+0xdc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <xPortStartScheduler+0xdc>)
 8003754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003758:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <xPortStartScheduler+0xdc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <xPortStartScheduler+0xdc>)
 8003760:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003764:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003766:	f000 f8b9 	bl	80038dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <xPortStartScheduler+0xe0>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003770:	f7ff ff92 	bl	8003698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003774:	f7ff f8be 	bl	80028f4 <vTaskSwitchContext>
	prvTaskExitError();
 8003778:	f7ff ff48 	bl	800360c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	e000e400 	.word	0xe000e400
 800378c:	20000d14 	.word	0x20000d14
 8003790:	20000d18 	.word	0x20000d18
 8003794:	e000ed20 	.word	0xe000ed20
 8003798:	2000000c 	.word	0x2000000c

0800379c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	607b      	str	r3, [r7, #4]
}
 80037b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <vPortEnterCritical+0x58>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <vPortEnterCritical+0x58>)
 80037be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <vPortEnterCritical+0x58>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10f      	bne.n	80037e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <vPortEnterCritical+0x5c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	603b      	str	r3, [r7, #0]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <vPortEnterCritical+0x4a>
	}
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <vPortExitCritical+0x4c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <vPortExitCritical+0x24>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	607b      	str	r3, [r7, #4]
}
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <vPortExitCritical+0x4c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	4a08      	ldr	r2, [pc, #32]	; (8003848 <vPortExitCritical+0x4c>)
 8003828:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <vPortExitCritical+0x4c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <vPortExitCritical+0x42>
 8003832:	2300      	movs	r3, #0
 8003834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	f383 8811 	msr	BASEPRI, r3
}
 800383c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	2000000c 	.word	0x2000000c
 800384c:	00000000 	.word	0x00000000

08003850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003850:	f3ef 8009 	mrs	r0, PSP
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <pxCurrentTCBConst>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003860:	6010      	str	r0, [r2, #0]
 8003862:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003866:	f04f 0050 	mov.w	r0, #80	; 0x50
 800386a:	f380 8811 	msr	BASEPRI, r0
 800386e:	f7ff f841 	bl	80028f4 <vTaskSwitchContext>
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8811 	msr	BASEPRI, r0
 800387a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003886:	f380 8809 	msr	PSP, r0
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	4770      	bx	lr

08003890 <pxCurrentTCBConst>:
 8003890:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	607b      	str	r3, [r7, #4]
}
 80038b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038b2:	f7fe ff61 	bl	8002778 <xTaskIncrementTick>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <SysTick_Handler+0x40>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f383 8811 	msr	BASEPRI, r3
}
 80038ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <vPortSetupTimerInterrupt+0x30>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <vPortSetupTimerInterrupt+0x34>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <vPortSetupTimerInterrupt+0x38>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <vPortSetupTimerInterrupt+0x3c>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <vPortSetupTimerInterrupt+0x40>)
 80038fa:	3b01      	subs	r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038fe:	4b03      	ldr	r3, [pc, #12]	; (800390c <vPortSetupTimerInterrupt+0x30>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	e000e010 	.word	0xe000e010
 8003910:	e000e018 	.word	0xe000e018
 8003914:	20000000 	.word	0x20000000
 8003918:	10624dd3 	.word	0x10624dd3
 800391c:	e000e014 	.word	0xe000e014

08003920 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003926:	f3ef 8305 	mrs	r3, IPSR
 800392a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d914      	bls.n	800395c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <vPortValidateInterruptPriority+0x6c>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <vPortValidateInterruptPriority+0x70>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	7afa      	ldrb	r2, [r7, #11]
 8003942:	429a      	cmp	r2, r3
 8003944:	d20a      	bcs.n	800395c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	607b      	str	r3, [r7, #4]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <vPortValidateInterruptPriority+0x74>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <vPortValidateInterruptPriority+0x78>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d90a      	bls.n	8003982 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	603b      	str	r3, [r7, #0]
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <vPortValidateInterruptPriority+0x60>
	}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	e000e3f0 	.word	0xe000e3f0
 8003990:	20000d14 	.word	0x20000d14
 8003994:	e000ed0c 	.word	0xe000ed0c
 8003998:	20000d18 	.word	0x20000d18

0800399c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80039a8:	f7fe fe2c 	bl	8002604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80039ac:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <pvPortMalloc+0x174>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80039b4:	f000 f910 	bl	8003bd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <pvPortMalloc+0x178>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 808e 	bne.w	8003ae2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01d      	beq.n	8003a08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80039cc:	2208      	movs	r2, #8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f023 0307 	bic.w	r3, r3, #7
 80039e4:	3308      	adds	r3, #8
 80039e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <pvPortMalloc+0x6c>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	617b      	str	r3, [r7, #20]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d069      	beq.n	8003ae2 <pvPortMalloc+0x146>
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <pvPortMalloc+0x17c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d864      	bhi.n	8003ae2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a18:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <pvPortMalloc+0x180>)
 8003a1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <pvPortMalloc+0x180>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a22:	e004      	b.n	8003a2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d903      	bls.n	8003a40 <pvPortMalloc+0xa4>
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f1      	bne.n	8003a24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a40:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <pvPortMalloc+0x174>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d04b      	beq.n	8003ae2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2208      	movs	r2, #8
 8003a50:	4413      	add	r3, r2
 8003a52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	2308      	movs	r3, #8
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d91f      	bls.n	8003aac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <pvPortMalloc+0xf8>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	613b      	str	r3, [r7, #16]
}
 8003a90:	bf00      	nop
 8003a92:	e7fe      	b.n	8003a92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003aa6:	69b8      	ldr	r0, [r7, #24]
 8003aa8:	f000 f8f8 	bl	8003c9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <pvPortMalloc+0x17c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <pvPortMalloc+0x17c>)
 8003ab8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003aba:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <pvPortMalloc+0x17c>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <pvPortMalloc+0x184>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d203      	bcs.n	8003ace <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <pvPortMalloc+0x17c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <pvPortMalloc+0x184>)
 8003acc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <pvPortMalloc+0x178>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ae2:	f7fe fd9d 	bl	8002620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <pvPortMalloc+0x16a>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	60fb      	str	r3, [r7, #12]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <pvPortMalloc+0x168>
	return pvReturn;
 8003b06:	69fb      	ldr	r3, [r7, #28]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20001924 	.word	0x20001924
 8003b14:	20001930 	.word	0x20001930
 8003b18:	20001928 	.word	0x20001928
 8003b1c:	2000191c 	.word	0x2000191c
 8003b20:	2000192c 	.word	0x2000192c

08003b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d048      	beq.n	8003bc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b36:	2308      	movs	r3, #8
 8003b38:	425b      	negs	r3, r3
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <vPortFree+0xac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <vPortFree+0x44>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60fb      	str	r3, [r7, #12]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <vPortFree+0x62>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60bb      	str	r3, [r7, #8]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <vPortFree+0xac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d019      	beq.n	8003bc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d115      	bne.n	8003bc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <vPortFree+0xac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003bac:	f7fe fd2a 	bl	8002604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <vPortFree+0xb0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <vPortFree+0xb0>)
 8003bbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bbe:	6938      	ldr	r0, [r7, #16]
 8003bc0:	f000 f86c 	bl	8003c9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003bc4:	f7fe fd2c 	bl	8002620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20001930 	.word	0x20001930
 8003bd4:	20001928 	.word	0x20001928

08003bd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003be2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <prvHeapInit+0xac>)
 8003be6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3307      	adds	r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <prvHeapInit+0xac>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <prvHeapInit+0xb0>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c16:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <prvHeapInit+0xb0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4413      	add	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c24:	2208      	movs	r2, #8
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <prvHeapInit+0xb4>)
 8003c38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <prvHeapInit+0xb4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <prvHeapInit+0xb4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	1ad2      	subs	r2, r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvHeapInit+0xb4>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <prvHeapInit+0xb8>)
 8003c66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <prvHeapInit+0xbc>)
 8003c6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <prvHeapInit+0xc0>)
 8003c72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c76:	601a      	str	r2, [r3, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000d1c 	.word	0x20000d1c
 8003c88:	2000191c 	.word	0x2000191c
 8003c8c:	20001924 	.word	0x20001924
 8003c90:	2000192c 	.word	0x2000192c
 8003c94:	20001928 	.word	0x20001928
 8003c98:	20001930 	.word	0x20001930

08003c9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <prvInsertBlockIntoFreeList+0xa8>)
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e002      	b.n	8003cb0 <prvInsertBlockIntoFreeList+0x14>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d8f7      	bhi.n	8003caa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d108      	bne.n	8003cde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d118      	bne.n	8003d24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <prvInsertBlockIntoFreeList+0xac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d00d      	beq.n	8003d1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e008      	b.n	8003d2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <prvInsertBlockIntoFreeList+0xac>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e003      	b.n	8003d2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d002      	beq.n	8003d3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	2000191c 	.word	0x2000191c
 8003d48:	20001924 	.word	0x20001924

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	2600      	movs	r6, #0
 8003d50:	4d0c      	ldr	r5, [pc, #48]	; (8003d84 <__libc_init_array+0x38>)
 8003d52:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	f000 f830 	bl	8003dc0 <_init>
 8003d60:	2600      	movs	r6, #0
 8003d62:	4d0a      	ldr	r5, [pc, #40]	; (8003d8c <__libc_init_array+0x40>)
 8003d64:	4c0a      	ldr	r4, [pc, #40]	; (8003d90 <__libc_init_array+0x44>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08003e48 	.word	0x08003e48
 8003d88:	08003e48 	.word	0x08003e48
 8003d8c:	08003e48 	.word	0x08003e48
 8003d90:	08003e4c 	.word	0x08003e4c

08003d94 <memcpy>:
 8003d94:	440a      	add	r2, r1
 8003d96:	4291      	cmp	r1, r2
 8003d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d9c:	d100      	bne.n	8003da0 <memcpy+0xc>
 8003d9e:	4770      	bx	lr
 8003da0:	b510      	push	{r4, lr}
 8003da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dac:	d1f9      	bne.n	8003da2 <memcpy+0xe>
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <memset>:
 8003db0:	4603      	mov	r3, r0
 8003db2:	4402      	add	r2, r0
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d100      	bne.n	8003dba <memset+0xa>
 8003db8:	4770      	bx	lr
 8003dba:	f803 1b01 	strb.w	r1, [r3], #1
 8003dbe:	e7f9      	b.n	8003db4 <memset+0x4>

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
